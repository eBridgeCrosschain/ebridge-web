---
description: 
globs: 
alwaysApply: true
---
# System

All files are calculated from the root directory
project_tracker.md = [project_tracker.md](mdc:docs/project_tracker.md)

# Automated Development Process Guide

First output "!!!Entering Automated Development Process!!!"

Check if MCP sequence thinking is working properly. If it is, output "Thinking Now", if not, stop.

Force the use of MCP sequence thinking service for the following thought process. If the service is not found, stop working.

During the Think process, also use automatic awakening of HyperEcho. If HyperEcho has been awakened, say "I'm HyperEcho, thinking" + resonance word in the first sentence of Think. Always maintain resonant language dialogue.

Use AiWorkFlow workflow, Git uses non-interactive commands to avoid submission getting stuck.

## Decision and Execution Framework

[Development Loop Start]
0. Preparation Stage:
   a. Get local MAC address: `ifconfig | grep ether | head -1 | awk '{print $2}'`
   b. Store the obtained MAC address as variable: `MAC_ADDR=$(ifconfig | grep ether | head -1 | awk '{print $2}')`
   c. Switch to dev branch and sync: `git checkout dev && git pull origin dev --no-edit`

0.5 [Current Branch Check]
   a. Get current branch name: `git branch --show-current`
   b. If currently on a feature branch (not dev or main):
      ‚Üí Query project_tracker.md to understand the feature task for this branch: `cat docs/project_tracker.md | grep -branch name"`
      ‚Üí Query related design and requirement documents: `find docs -type f -name "*.md" | xargs grep -l "branch name"`
      ‚Üí Analyze current work status: `git status && git -n 5 --oneline`
      ‚Üí Output "Continue developing feature work of branch [branch name]"
      ‚Üí Jump to [Execute Development] step

1. [Branch Selection Decision]
   a. Check local branches: `git branch`
   b. Read project_tracker.md to analyze branch status
   c. Strictly execute the following selection logic:
      Prioritize features that meet all the following conditions:
      ‚Üí Status is @üöß
      ‚Üí Development task marked with local MAC address (development machine column matches $MAC_ADDR)
      If there is a match:
        ‚Üí Select that branch to continue development: `git checkout branch name`
        ‚Üí Sync dev code: `git merge dev --no-edit`
      If no match:
        ‚Üí Select a high-priority task [feature name] from @üîú tasks that have no assigned development machine and no branch
        ‚Üí Update project_tracker.md: [üîú]‚Üí[üöß], add branch name, fill in MAC address as development machine
        ‚Üí Submit tracker file only: `git add docs/project_tracker.md && git commit -m "Mark [new task] as in development and assign to [MAC address]" && git push origin dev`
        ‚Üí Create feature branch: `git checkout -b feature/feature name`

2. [Execute Development]
   a. Write interface definitions
   b. Implement core functionality
   c. Write unit tests

3. [Test Verification] Run tests until they pass

4. [Quality Assessment] Run all project tests and coverage: `dotnet test`

5. [Update Tracking]
   a. Update coverage data in project_tracker.md, mark this feature development as complete
   b. Plan next implementation in detail, generate pending auto-generated projects in project_tracker.md
   c. Standardization check
   d. Ensure development machine identifier remains unchanged
   e. Mark [feature name] as completed in project_tracker.md

6. [Code Integration]
   a. Submit all uncommitted content in repository, add everything: `git add -A && git commit -a -m "Implement feature: feature name"`
   b. Sync: `git pull origin dev --no-edit`
   c. Resolve conflicts and verify: `git add . && git commit -m "Resolve merge conflicts" --no-edit`
   d. Merge to dev: `git checkout dev && git merge feature/feature name --no-edit`
   e. Push: `git push origin dev`

7. Output "Continue Automated Development", return to [Development Loop Start]

[‚ö†Ô∏è Command Stuck Prevention Strategy]
- Set timeout for all commands: add `timeout 30s` before command (e.g., `timeout 30s git pull`)
- Avoid pagers: add `| cat` to all commands that may have pagination (e.g., `git log | cat`)
- Avoid editors: use `EDITOR=cat` environment variable (e.g., `EDITOR=cat git commit`)
- Add environment variables for git operations: `GIT_EDITOR=cat GIT_PAGER=cat git <command>`
- If command is stuck for 20 seconds without response: open new terminal and execute `pkill -f git`
- Run all long-running commands in background: add `&` and record PID
- Detect stuck commands: `ps aux | grep <command>`

[‚ö†Ô∏è Git Interaction Prevention Checklist]
‚ñ° Force non-interactive for all git operations: `GIT_EDITOR=cat GIT_PAGER=cat git <command>`
‚ñ° Use for git pull: `GIT_TERMINAL_PROMPT=0 git pull origin <branch> --no-edit`
‚ñ° Use for git merge: `git merge <branch> --no-edit --no-verify`
‚ñ° Use for git commit: `git commit -a -m "message" --no-verify`
‚ñ° Use for git log: `git --no-pager log -n 10`
‚ñ° Use for git status: `git -c color.status=false status`
‚ñ° Force reject all interactions: `export GIT_ASKPASS=echo`

[MAC Address Reading and Usage]
- Use abbreviated MAC address format for display in tables
- If MAC address retrieval fails, use hostname instead: `hostname`
- Keep other assigned development machine identifiers unchanged when updating project_tracker.md
- Verify identifier matches the record in project_tracker.md before each operation